1 - Texto (String):
  CHAR: Armazena strings de tamanho fixo. Usado quando os valores têm um comprimento constante.
  VARCHAR: Armazena strings de tamanho variável. Apropriado para valores com comprimentos variáveis.
  TEXTO (TEXT): Armazena strings muito longas, como documentos ou descrições.

2 - Numérico:
  INTEGER (INT): Armazena números inteiros.
  FLOAT: Armazena números de ponto flutuante, geralmente usados para valores com casas decimais.
  NUMERIC (DECIMAL): Armazena números com uma precisão específica, geralmente usados em aplicações financeiras.

3 - Data e Hora:
  DATE: Armazena datas sem informações de horário.
  TIME: Armazena informações de horário.
  TIMESTAMP: Combina data e horário em um único tipo.

4 - Booleano:
  BOOLEAN (BOOL): Armazena valores verdadeiros ou falsos.

5 - Binário:
  BLOB (Binary Large Object): Armazena dados binários, como imagens, vídeos ou arquivos.
  BIT: Armazena valores binários, como 0 ou 1.


----------


Selecionar todos os campos de uma tabela:
  SELECT * FROM nome_tabela;


Filtrar dados com a cláusula  `WHERE`:
  SELECT * FROM nome_tabela WHERE nome_coluna = 'valor_desejado';


Selecionar valores distintos com  `DISTINCT`:
  SELECT DISTINCT nome_coluna FROM nome_tabela;


Criar uma tabela:
  CREATE TABLE nome_tabela (
    ID INT PRIMARY KEY,
    nome_coluna1 VARCHAR(250),
    nome_coluna2 VARCHAR(250)
  );


Adicionar uma nova coluna em uma tabela  `ALTER TABLE`:
  ALTER TABLE nome_tabela ADD nome_coluna VARCHAR(250);


Excluir uma coluna de uma tabela:
  ALTER TABLE nome_tabela DROP COLUMN nome_coluna;


Excluir uma tabela  `DROP TABLE`:
  DROP TABLE nome_tabela;


Criar uma tabela com chaves estrangeiras:
  CREATE TABLE nome_tabela (
    id INT PRIMARY KEY,
    nome_coluna1 VARCHAR(250),
    nome_coluna2 TEXT,
    nome_coluna3 INT,
    nome_coluna4 DECIMAL(10,2),
    nome_coluna5 DATE,
    FOREIGN KEY (nome_coluna3) REFERENCES nome_tabela_referencia(id_categoria),
    FOREIGN KEY (nome_coluna4) REFERENCES nome_tabela_referencia(id)
  );


Inserir dados:
  INSERT INTO tabela_destino (coluna1, coluna2, ...)
  VALUES (dados_coluna1, dados_coluna2, ...),
    (dados_coluna1, dados_coluna2, ...),
    (dados_coluna1, dados_coluna2, ...),
    (dados_coluna1, dados_coluna2, ...);


Inserir dados a partir de outra tabela:
  INSERT INTO tabela_destino (coluna1, coluna2, ...)
  SELECT (dados_coluna1, dados_coluna2, ... )
  FROM tabela_origem
  WHERE condicao;


Filtros no SQL:   ( <> == Diferente )
  SELECT * FROM nome_tabela WHERE nome_coluna <> 12345;

  SELECT * FROM nome_tabela WHERE nome_coluna > 'J';

  SELECT * FROM nome_coluna WHERE nome_coluna > '2023-09-19';


Filtros Compostos:
  SELECT * FROM nome_tabela WHERE nome_coluna >= 200 AND status = 'Pendente';

  SELECT * FROM nome_tabela WHERE status = 'Pendente' OR status = 'Processando';

  SELECT * FROM nome_tabela WHERE NOT status = 'Pendente';


Filtros com Intervalos  BETWEEN:
  SELECT * FROM nome_tabela WHERE nome_coluna BETWEEN '2023-08-01' AND '2023-09-01';


Ordenação de Dados:
  Ordenar produtos pelo nome  alfabética:
    SELECT * FROM nome_tabela WHERE nome_coluna BETWEEN 200 AND 600 ORDER BY nome_do_produto;

  Ordenar produtos por data de inclusão:
    SELECT * FROM nome_tabela WHERE nome_coluna BETWEEN 200 AND 600 ORDER BY data_de_inclusao;

  Ordenar de forma decrescente  DESC  ou  ASC:
    SELECT * FROM nome_tabela WHERE nome_coluna BETWEEN 200 AND 600 ORDER BY fornecedor DESC;


Renomear colunas temporariamente na consulta - Alias (Apelidos para Colunas)
  SELECT nome_coluna_original AS nome_coluna_apelido FROM nome_tabela;


Atualizar dados:
  UPDATE nome_coluna
  SET dado_novo = 120
  WHERE dado_para_atualizar > 100;


Excluir dados:
  DELETE FROM nome_tabela WHERE nome_coluna = 'Turquia';

  Acompanhado de um operador lógico para excluir todos os fornecedores que possuíam ID maior que 35:
    DELETE FROM nome_tabela WHERE id > 35;



