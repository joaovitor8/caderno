Comandos Basicos:
   Console.WhiteLine("Escreve um Texto no console e cria uma nova linha")
   Console.White("Escreve um Texto no console)
   Console.ReadKey();   Espera o usuario apertar ENTER para sair do console

   Ler Teclado
      string(Console.ReadLine(), out string txt)
      float.TryParse(Console.ReadLine(), out float num)
      int.TryParse(Console.ReadLine(), out int num)

          TryParse = Tente converte
      

   .ToLower()
   .ToUper()

---------------------------------------------------------------------------------------------------

Tipos Primitivos:

Interios
   byte   = 1byte / 0 a 255
   sbyte   = 1byte / -128 a 127
   shot   = 2byte / -32768 a 32767
   ushort   = 2byte / 0 a 65535
   int   = 4byte / -2147483648 a 214748367
   uint   = 4byte / 0 a 4294967295
   long   = 8byte / -9223372036854775808L to 9223372036854775807L
   ulong   = 8byte / 0 a 1844674407379551615

Caracteres
   char   = 2byte / Caractes delimitadas por aspas. EX: 'a', 'ç', 'o'
   string   = "Texto"

Reais
   float   = 4byte / Números até 10 elevado a 38
   double   = 8byte / Números até 10 elevado a 308
   decimal   = 16byte / Números com até 28 casas decimais

Logicos
   bool  =  true or false
   enum
   struct
   object

---------------------------------------------------------------------------------------------------

Números Aleatórios:   Random()

EX:  Random gerador = new Random();
     int n = gerador.Next(1, 4)

---------------------------------------------------------------------------------------------------

Data e Hora:   DateTime

EX:  int dia = DateTime.Now.Day;
     int mes = DateTime.Now.Month;
     int ano = DateTime.Now.Year;

---------------------------------------------------------------------------------------------------

Formatação com Números Interpoladas:

:C   Monetário (Currency)
:D   Decimal (Inteiro)
:N   Número (Real)
:E   Científico
:X   Hecadecimal

---------------------------------------------------------------------------------------------------

CLASSIFICAÇÃO DE OPERADORES:

Quantidades de Operandos
   unario
   binario
   ternario

Funcionalidade
   aritimetico
   relacional
   lógico
   bitwise
   atribuição
   incremento
   condiconal

---------------------------------------------------------------------------------------------------

OPERADORES ARITMÉTICOS:   n = Número

Unarios
   + n   identidade
   - n   negação aritmética

Binarios
   n + n   adição
   n - n   subtração
   n * n   multiplicação
   n / n   divisão (intera ou real)
   n % n   resto da divisão inteira (remainder)

---------------------------------------------------------------------------------------------------

DIVISÕES INTEIRA E REAL:

Divisão Inteira
   para que a divisão seja  interia  os dois números divididos terão que ser  inteiros

Divisão Real
    para que a divisão seja  real  apenas um dos números divididos tera que ser um número  real


ORDEM DE PRECENDÊNCIA DOS OPERADORES ARITMÉTICOS:
   1º ()        parênteses
   2º +, -      unários
   3º *, /, %   multiplicativos
   4º +, -      aditivos (binarios)

---------------------------------------------------------------------------------------------------

OPERADORES RELACIONAIS:

Comparações Logicas (sempre binarios)
   n == n  igualdade
   n != n  diferença
   n > n   maior que
   n < n   menor que
   n >= n  maior ou igual a
   n <= n  menor ou igual a
   n is n  verificador de tipo

   o retorno é sempre  true  ou  false

---------------------------------------------------------------------------------------------------

OPERADORES LÓGICOS:

Negação
   !  NÃO
   unico operador lógico que é unario

Conjunção
   &&  E     As duas respostas tem que ser verdadeiro para dar  true

Disjunção
   ||  OU     Apenas uma resposta tem que ser verdadeiro para dar  true

Disjunção Exclusiva  (não tem no C#, mas tem bitwise)
   XOU        Para dar verdadeiro tem que ter exclusivamente um  true 

---------------------------------------------------------------------------------------------------

OPERADOR CONDICIONAL:

Ternário
   expreção lógica ? true : false

   ex -   (altura <= 1.70) ? "baixa" : "alta"

---------------------------------------------------------------------------------------------------

BASES NUMÉRICAS C#:

Binária     (Base 2)  0 1
Octal       (Base 8)  0 1 2 3 4 5 6 7
Decinal     (Base 10) 0 1 2 3 4 5 6 7 8 9
Hexadecimal (Base 16) 0 1 2 3 4 5 6 7 8 9 A B C D E F

Convertendo Bases numéricas (Na Programação)
   Convert.ToString(n, ToBase: B)

Convertendo Bases numéricas (Na Mão)
   Fazer potencias de 2 até dar uma resultado mais proximo do número que você estiver fazendo a inversão
      Ex: n° 53      32 16 8 4 2 1
                      1  1 0 1 0 1      n° 53 em base Binária

Base Binária Negativa
   Fazer potencias de 2 até dar uma resultado mais proximo do número que você estiver fazendo a inversão
      Ex: n° ~12      128 64 32 16  8 4 2 1
                        0  0  0  0  1 1 0 0   =  +12
                        1  1  1  1  0 0 1 1   =  -13

      Apos fazer a converção, inverter todos os numeros, os 0 serão 1 e os 1 serão 0, e somar mais 1

---------------------------------------------------------------------------------------------------

OPERADORES BITWISE:

Conjução   &
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 & 12

   Depois que fizer a conversão você faz a regra da Conjução

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 0 1 0 0 0  = 8


Disjunção   |
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 | 12

   Depois que fizer a conversão você faz a regra da Disjução

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 1 1 1 0  = 30


Disjunção Esclusiva ^
   Primeiro você passa os numeros para a base Binária
     Ex: n°s  26 ^ 12

   Depois que fizer a conversão você faz a regra da Disjução Esclusiva

             26 = 1 1 0 1 0
             12 =   1 1 0 0
      Resultado = 1 0 1 1 0  = 8


Negação ~
   Fazer potencias de 2 até dar uma resultado mais proximo do número que você estiver fazendo a inversão
      Ex: n° ~12      128 64 32 16  8 4 2 1
                        0  0  0  0  1 1 0 0   =  +12
                        1  1  1  1  0 0 1 1   =  -13

   Apos fazer a converção, inverter todos os numeros, os 0 serão 1 e os 1 serão 0, e somar mais 1
   Um atalho é que quando for inverter um numero de positivo para negativo é só somar mais 1 e trocar o sinal
   E de negativo para positivo tira 1 e troca o sinal


Right Shift >>
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, da direita para a esquerda, você tira a quantidade do 2° numero
     Ex: n°  22 >> 2

                 16 8 4 2 1
             22 = 1 0 1 1 0
      resultado = 1 0 1 1 0  menos 2 casas = 1 0 1

                      4 2 1
                      1 0 1  = 4 + 1 = 5


Left Shift <<
   Primeiro você passa o 1° numero para a base Binária
   Depois que fizer a conversão, você aduciona a quantidade do 2° numero
     Ex: n°  22 << 2

                 16 8 4 2 1
             22 = 1 0 1 1 0
      resultado = 1 0 1 1 0  mais 2 casas = 1 0 1 1 0 0 0

           64 32 16 8 4 2 1
            1  0  1 1 0 0 0  = 64 + 16 + 8 = 88

---------------------------------------------------------------------------------------------------

OPERADORES DE ATRIBUIÇÃO:

Atribuição Simple
   =

Demais Atribuições
   +=
   -=
   *=
   /=
   %=
   &=
   |=
   ^=
  >>=
  <<=

---------------------------------------------------------------------------------------------------

INCREMENTO e DECREMENTO:

Mais Mais Pré
   ++n

Mais Mais Pós
   n++

Menos Menos Pré
   --n

Menos Menos Pós
   n--

---------------------------------------------------------------------------------------------------

COALESCÊNCIA NULA:

Tipo Primitivo?
   a  ?  ira fazer o tipo primitivo aceitar um valor nulo(null)

??
   as ??  iram trocar o valor nulo(null) por algum outro valor escolido
   Ex:  float nota = nota ?? 0.0


PRECENDÊNCIA COMPLETA:

1°   ()   pós++   pós--                                         -> da esquerda para a direita
2°   SizeOf   +unario   -unario   ~   !   ++pré   --pré         <- da direita para a esquerda
3°   TypeCasts                                                  <- da direita para a esquerda
4°   *   /   %                                                  -> da esquerda para a direita
5°   +binario   -binario                                        -> da esquerda para a direita
6°   >>   <<                                                    -> da esquerda para a direita
7°   <   <=   =>   >                                            -> da esquerda para a direita
8°   ==   !=                                                    -> da esquerda para a direita
9°   &                                                          -> da esquerda para a direita
10°   ^                                                          -> da esquerda para a direita
11°   |                                                          -> da esquerda para a direita
12°   &&                                                         -> da esquerda para a direita
13°   ||                                                         -> da esquerda para a direita
14°   ? :                                                        <- da direita para a esquerda
15°   =   +=   -=   *=   /=   %=                                 <- da direita para a esquerda
16°   ,                                                          -> da esquerda para a direita
(OBS: os  pós  irão ser apenas lido, e só no final será dado seu valor) 

---------------------------------------------------------------------------------------------------

CLASSES Math e MathF:

Math
   sempre irá retornar o valor  double
   oculpa  8 bytes

MathF
   sempre irá retornar o valor  float
   oculpa  4 bytes

---------------------------------------------------------------------------------------------------

FUNÇÕES - ANÁLISE e ARREDONDAMENTO:

Análise
   Math.Min()
   Math.Max()
   Math.Clamp()

Arredondamento
   Math.Celing()
   Math.Floor()
   Math.Truncate()
   Math.Round()

---------------------------------------------------------------------------------------------------

CÁLCULOS ANGULARES:

Math.Sin(n°)
Math.Cos(n°)
Math.Tan(n°)

(Obs: numero tem q ser em  radiano)

---------------------------------------------------------------------------------------------------

Vetor:

string[] vogal = {"a", "e", "i", "o", "u"};
int[] num = {1, 2, 3, 4, 5};
float[] num = {1.2, 2.5, 3.1, 4.8, 5.5};
   
Ve se um valor tem no vetor
   vogal.Contains(valor)
   num.Contains(valor)

---------------------------------------------------------------------------------------------------

Repetições:

if / else is / else      se / se não se / se não
   if ()
   {
      Comando
   }
   else if ()
   {
      Comando
   }
   else
   {
      Comando
   }

for      para
   for (int i = 0; i < 10; i++)
   {
      Comando
   }

while      enquanto
   while ()
   {
      Comando
   }

---------------------------------------------------------------------------------------------------

Funções:

public tipo NomeDaFunção(); {}

---------------------------------------------------------------------------------------------------

Tentar/Erro:


Ler um arvivo

try
{
   string line = "";
   StreamReader sr = new StreamReader(arquivo);
   line= sr.ReadLine();
   while (line != null)
   {
      Console.WriteLine(line);
      line = sr.ReadLine();
   }
   sr.Close();
}
catch (Exception e)
{
   Console.WriteLine("Erro: " + e.Message);
}
Console.ReadKey();



Gravar texto

try
{
   StreamWriter sr = new StreamWriter(txt);
   sr.WriteLine();
   sr.Close();
}
catch (Exception e)
{
   Console.WriteLine("Erro: " + e.Message);
}
Console.ReadKey();

---------------------------------------------------------------------------------------------------

Programação Orientada a Objetos C#:

Os 4 Pilares
   Abstração
      O conceito de abstração consiste em esconder os detalhes de algo, no caso, os detalhes desnecessários. No mundo real, utilizamos abstrações o tempo todo. Tudo que não sabemos como funciona por baixo dos panos pode ser considerado uma abstração.
   Encapsulamento
     Significa que o código de cada objeto deve controlar apenas seu próprio estado
   Herança        :
      Permite que um objeto adquira as propriedades e métodos de outro objeto
   Polimorfismo
      Pode compartilhar comportamentos e permitir substituições personalizadas.


Classes
   O Objeto


metodos
      Um método em C# é um bloco de código que contém uma série de instruções. Um programa executa as instruções chamando o método e especificando argumentos.


Propriedades   -   comando = propfull
Propriedade Simplificadas   -   public tipo nome { get; set; }


Construtores
   é uma metodo q não preciso definir o tipo
   o nome é igual ao da classe

   public nome(receber parametros)
   {
      
   }



ENUM
Destruidores
Modificador Static
Classe Abstrata
Interface
Interfaces X Classes Abstratas