Estruturas de Dados para Sistemas Inteligentes



## Fundamentos
### Entendendo as Estruturas de Dados
* Maneiras de organizar dados para uso eficiente
* Divisão: estáticas (vetores, matrizes) e dinâmicas (listas, árvores)
* Critérios: tempo, memória, facilidade de acesso

### Entendendo Vetores e Matrizes
* Vetor: coleção linear indexada (índice fixo)
* Matriz: estrutura bidimensional (linhas × colunas)
* Acesso rápido (O(1)), mas tamanho fixo

### Entendendo Ordenação
* Métodos: Bubble Sort, Insertion Sort, Selection Sort (simples, O(n²))
* Quick Sort, Merge Sort (eficientes, O(n log n))
* Importante para busca e otimização

---
## Recursão
### Entendendo a Recursão I
* Função que chama a si mesma
* Caso base + passo recursivo
* Exemplo: fatorial, Fibonacci

### Entendendo a Recursão II
* Aplicações em estruturas de dados (árvores, listas)
* Divide e conquista (Merge Sort, Quick Sort)

---
## Estruturas Lineares
### Entendendo Pilha
* Estrutura LIFO (Last In, First Out)
* Operações: push, pop, top

### Entendendo as Aplicações de Pilha
* Pilha de chamadas de funções
* Verificação de expressões (parênteses)
* Algoritmos de backtracking

### Entendendo Fila
* Estrutura FIFO (First In, First Out)
* Operações: enqueue, dequeue

### Entendendo as Aplicações de Fila
* Sistemas de atendimento (filas reais)
* Impressoras, buffers de dados
* Algoritmos BFS (busca em largura)

### Entendendo os Elementos Lista Ligada
* Nós: dado + ponteiro para próximo (ou anterior)
* Lista dinâmica → cresce conforme necessidade

### Entendendo a Lista Ligada
* Tipos: simplesmente ligada, duplamente ligada, circular
* Vantagem: inserção/remoção fáceis
* Desvantagem: acesso sequencial (O(n))

### Entendendo as Aplicações da Lista Ligada
* Implementação de pilhas e filas
* Tabelas de hash (listas para colisões)
* Sistemas dinâmicos de memória

---
## Estruturas Hierárquicas
### Entendendo Árvores
* Estrutura em hierarquia (pai → filhos)
* Árvore raiz, subárvores, folhas
* Altura = maior profundidade

### Entendendo Árvores Binárias
* Cada nó → até 2 filhos (esq/dir)
* Tipos: cheia, completa, balanceada
* Base para árvores de busca (BST)

### Entendendo os Percursos em Árvores
* Pré-ordem (Root–Left–Right)
* Em ordem (Left–Root–Right) → ordena BST
* Pós-ordem (Left–Right–Root)
* Por níveis (BFS)

---
## Resumindo:
* **Lineares**: vetores, listas, pilhas, filas (sequência de dados)
* **Hierárquicas**: árvores (organização por níveis)
* **Recursão**: chave para manipular estruturas como árvores

