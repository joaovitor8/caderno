# üì¶ Importa√ß√£o e Configura√ß√£o
import pandas as pd  # Importa a biblioteca Pandas com o alias padr√£o 'pd'

# -----------------------------

# üèóÔ∏è Cria√ß√£o de Estruturas de Dados
pd.Series([10, 20, 30])  # S√©rie unidimensional
pd.DataFrame({'Nome': ['Ana', 'Jo√£o'], 'Idade': [25, 30]})  # Tabela de dados

# -----------------------------

# üìÇ Leitura de Arquivos
pd.read_csv('dados.csv')  # CSV
pd.read_excel('dados.xlsx')  # Excel
pd.read_json('dados.json')  # JSON
# pd.read_sql('SELECT * FROM tabela', conexao)  # SQL (requer conex√£o ativa)

# -----------------------------

# üëÄ Visualiza√ß√£o de Dados
df.head(5)  # Primeiras linhas
df.tail(5)  # √öltimas linhas
df.sample(3)  # Amostra aleat√≥ria
df.info()  # Estrutura do DataFrame
df.describe()  # Estat√≠sticas descritivas
df.shape  # (linhas, colunas)
df.columns  # Nomes das colunas
df.index  # √çndices do DataFrame
df.dtypes  # Tipos de dados

# -----------------------------

# üîé Sele√ß√£o de Dados
df['coluna']  # Seleciona uma coluna
df[['col1', 'col2']]  # Seleciona m√∫ltiplas colunas
df.loc[0, 'coluna']  # Sele√ß√£o por r√≥tulo
df.iloc[0, 1]  # Sele√ß√£o por √≠ndice num√©rico
df.at[0, 'coluna']  # Acesso r√°pido (r√≥tulo)
df.iat[0, 1]  # Acesso r√°pido (posi√ß√£o)

# -----------------------------

# üßÆ Filtragem de Dados
df[df['coluna'] > 10]  # Filtro simples
df.query('coluna > 10 and outra_coluna == "Sim"')  # Filtro com query
df[df['coluna'].isin(['A', 'B'])]  # Filtro por lista de valores
df[df['coluna'].str.contains('texto')]  # Filtro por string

# -----------------------------

# üõ†Ô∏è Manipula√ß√£o de Dados
df['nova_coluna'] = df['col1'] * 2  # Criando nova coluna
df.drop('coluna', axis=1)  # Remove coluna
df.drop([0, 1], axis=0)  # Remove linhas
df.rename(columns={'antigo': 'novo'})  # Renomear colunas
df.insert(1, 'coluna', valores)  # Inserir coluna em posi√ß√£o espec√≠fica
df.replace({'coluna': {'velho': 'novo'}})  # Substitui√ß√£o de valores
df['coluna'].astype(float)  # Convers√£o de tipo
df.explode('coluna')  # Expande listas em m√∫ltiplas linhas

# -----------------------------

# üìä Estat√≠sticas e Contagens
df.mean()  # M√©dia
df.sum()  # Soma
df.count()  # Contagem de valores n√£o nulos
df.max(), df.min()  # M√°ximo e m√≠nimo
df.median(), df.std(), df.var()  # Mediana, desvio padr√£o, vari√¢ncia
df['coluna'].value_counts()  # Contagem de valores √∫nicos
df['coluna'].nunique()  # N√∫mero de valores √∫nicos

mean() : calcula a m√©dia dos grupos
sum() : calcula a soma dos valores do grupo
size() : calcula tamanhos de grupo
count() : calcula a contagem do grupo
std() : desvio padr√£o de grupos
var() : calcula a varia√ß√£o de grupos
sem() : erro padr√£o da m√©dia dos grupos
describe() : gera estat√≠sticas descritivas
first() : calcula o primeiro dos valores do grupo
last() : calcula o √∫ltimo dos valores do grupo
nth() : pega o n-√©simo valor do grupo
min() : calcula o m√≠nimo de valores do grupo
max() : calcula o m√°ximo de valores do grupo

# -----------------------------

# üß© Agrupamentos e Agrega√ß√µes
df.groupby('coluna').sum()  # Soma por grupo
df.groupby(['col1', 'col2']).agg({'col3': 'mean'})  # M√∫ltiplas agrega√ß√µes
df.pivot_table(values='valor', index='categoria', columns='ano', aggfunc='mean')  # Tabela din√¢mica

# -----------------------------

# üßÆ Ordena√ß√£o
df.sort_values('coluna')  # Ordena por coluna (ascendente)
df.sort_values('coluna', ascending=False)  # Descendente
df.sort_index()  # Ordena pelo √≠ndice

# -----------------------------

# üö´ Tratamento de Dados Nulos
df.isnull()  # Verifica nulos
df.notnull()  # Verifica n√£o nulos
df.fillna(0)  # Preenche nulos com valor
df.fillna(method='ffill')  # Preenche com valor anterior
df.dropna()  # Remove linhas com nulos
df.dropna(axis=1)  # Remove colunas com nulos

# -----------------------------

# üíæ Salvando Dados
df.to_csv('saida.csv', index=False)  # Salva em CSV
df.to_excel('saida.xlsx', index=False)  # Excel
df.to_json('saida.json')  # JSON
# df.to_sql('tabela', conexao, if_exists='replace')  # Salvar em SQL

# -----------------------------

# üöÄ Opera√ß√µes Avan√ßadas
df.apply(lambda x: x * 2)  # Aplica fun√ß√£o por coluna
df.applymap(str.upper)  # Aplica fun√ß√£o elemento a elemento (DataFrame)
df['coluna'].map({'A': 1, 'B': 2})  # Mapeia valores em Series
df.merge(df2, on='id')  # Junta dois DataFrames (join)
df.concat([df1, df2], axis=0)  # Concatena por linhas
df.melt(id_vars='id')  # Derrete colunas em linhas
df.pivot(index='id', columns='variavel', values='valor')  # Inverso do melt
df.duplicated()  # Verifica duplicados
df.drop_duplicates()  # Remove duplicados
df.corr()  # Correla√ß√£o entre colunas num√©ricas

# -----------------------------

# üß† Dicas Extras
with pd.option_context('display.max_rows', 100, 'display.max_columns', 20):
    print(df)  # Exibe mais dados no terminal

# Verificar mem√≥ria usada
df.memory_usage(deep=True)

# Verificar valores √∫nicos e suas contagens
df['coluna'].value_counts(normalize=True)  # Frequ√™ncia relativa

# Agrupamento cumulativo
df['acumulado'] = df['coluna'].cumsum()
